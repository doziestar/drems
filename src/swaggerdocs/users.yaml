tags:
- name: users
  description: users API

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# definitions
definitions:
  profile:
    type: object
    required:
      - userid
      - bio
    properties:
      userid:
        type: integer
      bio:
        type: string
      website:
        type: string
      location:
        type: string
      birthdate:
        type: string

  users:
    type: object
    required:
        - email
        - password
        - username
        - phoneNumber
    properties:
      id:
        type: integer
        description: user Id
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
      username:
        type: string
        description: user Username
      phoneNumber:
        type: string
        description: user PhoneNumber
      createdAt:
        type: string
        description: user CreatedAt
      updatedAt:
        type: string
        description: user UpdatedAt
      deletedAt:
        type: string
        description: user DeletedAt
      isActive:
        type: boolean
      isVerified:
        type: boolean
      roles:
        type: array
      firstName:
        type: string
        description: user FirstName
      lastName:
        type: string
        description: user LastName
      fullName:
        type: string
        description: user FullName
      profile:
        $ref: '#/definitions/profile'
        description: user Profile

schemes:
 - https
 - http

# {
#   "email": "dozie@gmail.com",
#   "password": "918273645dozie"
# }
